<!DOCTYPE html>

<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
	<title>Language Pronounce</title>
	<script src="//code.jquery.com/jquery-2.0.3.min.js"></script>
	<style type='text/css'>
		ul { list-style: none; }
		#recordingslist audio { display: block; margin-bottom: 10px; }
	</style>
<script>
var lang = "<%= lang %>";
var questions = [
  "<%= questions[0] %>"
<% for( var i = 1; i < questions.length; i ++ ){ %>
  ,"<%= questions[i] %>"
<% } %>
];
var q_idx = 0;
$(function(){
  $('#englishtext').html( questions[q_idx] );

  $('#voice').change( function(){
    var voice = $(this).val();
    var tmp1 = voice.split( '_' );
    var tmp2 = tmp1[1].indexOf( 'Voice' );
    var voicer = tmp1[1].substring( 0, tmp2 );
    $('#voicer').attr( 'src', './' + voicer + '.png' );

    var desc = $('#voice option:selected').attr( 'desc' );
    $('#voicer').attr( 'title', desc );
  });

  $.ajax({
    type: 'GET',
    url: './voices'
  }).done( function( result ){
    var data = JSON.parse( result );
    if( data.status && data.voices ){
      var voices = data.voices;
      for( var i = 0; i < voices.voices.length; i ++ ){
        var voice = voices.voices[i];
        var v_name = voice.name;

        var tmp1 = v_name.split( '_' );
        var tmp2 = tmp1[0].split( '-' );
        var v_lang = tmp2[0];
        if( v_lang == lang ){
          var v_desc = voice.description;
          var tmp3 = tmp1[1].indexOf( 'Voice' );
          var voicer = tmp1[1].substring( 0, tmp3 );
          $('#voice').append( '<option lang="' + v_lang + '" desc="' + v_desc + '" value="' + v_name + '">' + voicer + '</option>' );
        }
      }

      $('#voice').change();
    }
  });
});
</script>
<style>
.balloon{
  position: relative;
  padding: 20px;
  background-color: #fff3ad;
  display: inline-block;     /* 横幅を自動で変更 */
  border-radius: 10px;
}

.balloon::before{
  content: '';
  position: absolute;
  display: block;
  width: 0;
  height: 0;
  left: 20px;
  bottom: -15px;
  border-top: 15px solid #fff3ad;
  border-right: 15px solid transparent;
  border-left: 15px solid transparent;
}

/* 吹き出し本体 */
.balloon1{
  position: relative;
  padding: 20px;
  border-radius: 10px;
  color: #ffffff;
  background-color: #0888ff;
  margin-left: 110px;          /* 左に余白を設ける */
}
/* 画像 - 絶対配置で左上に配置 */
.balloon1 .icon{
  position: absolute;
  left: -110px;
  top: 0;
}
/* 三角アイコン */
.balloon1::before{
  content: '';
  position: absolute;
  display: block;
  width: 0;
  height: 0;
  left: -15px;
  top: 20px;
  border-right: 15px solid #0888ff;
  border-top: 15px solid transparent;
  border-bottom: 15px solid transparent;
}
</style>

</head>
<body>
	<div id="englishtext" class="balloon" onclick="nextQuestion(this);"></div>
        <div id="voicerdiv" onclick="speechExamplification(this);" ><img id="voicer" src="" title= "" height="200px"></div>
        <ul><li><select id="voice">
        </select></li></ul>
        <ul style="display:none;"><li><audio id="englishspeech" src="" controls autoplay></audio></li></ul>
	
	<button id='recordingstart' onclick="startRecording(this);">録音スタート</button>
	<button id='recordingstop' onclick="stopRecording(this);" disabled>停止</button>

        <hr/>
	
	<h3>認識結果</h3>
        <table border="0">
        <tr>
        <td><img src="./man.png"/></td>
	<td id="recognizedresult">&nbsp;</td>
        </tr>
        </table>

	<h3>Status</h3>
	<pre id="log"></pre>

	<script>
	function __log(e, data) {
		log.innerHTML += e + " " + (data || '') + '\n';
	}

	var audio_context;
	var recorder;

	function startUserMedia(stream){
		var input = audio_context.createMediaStreamSource(stream);
		__log('Media stream created.');
		
		recorder = new Recorder(input);
		__log('Recorder initialised.');
	}

	function startRecording(button){
		recorder && recorder.record();
		button.disabled = true;
		button.nextElementSibling.disabled = false;
		__log('Recording...');
	}

	function stopRecording(button){
		recorder && recorder.stop();
		button.disabled = true;
		button.previousElementSibling.disabled = false;
		__log('Stopped recording.');
		
		sendRecordData();
		recorder.clear();
	}

	function nextQuestion(button){
                q_idx ++;
                if( q_idx == questions.length ){ q_idx = 0; }
                $('#englishtext').html( questions[q_idx] );
                $('#recognizedresult').html( '&nbsp;' );
                $('#recognizedresult').removeClass( 'balloon1' );
                $('#score').html( '&nbsp;' );

                $('#recordingstart').attr( 'disabled', false );
                $('#recordingstop').attr( 'disabled', true );
                $('#speech').attr( 'disabled', true );
	}

	function sendRecordData(){
		recorder && recorder.exportWAV(function(blob) {
			var fd = new FormData();
			fd.append( 'data', blob );
			fd.append( 'lang', lang );
			$.ajax({
				type: 'POST',
				url: './s2t',
				data: fd,
				processData: false,
				contentType: false,
			}).done( function( result ){
                                var data = JSON.parse( result );
                                console.log( data.result );
                                $('#recognizedresult').html( data.result );
                                $('#recognizedresult').addClass( 'balloon1' );
                                $('#speech').attr( 'disabled', false );

/*
			        $.ajax({
        				type: 'POST',
        				url: './compare',
        				data: { question: $('#englishtext').html(), answer: data.result },
        			}).done( function( result1 ){
                                     var data1 = JSON.parse( result1 );
                                     console.log( data1 );
                                     $('#score').html( data1.score );
                                });
*/

/*
			var url = URL.createObjectURL(blob);
			var li = document.createElement('li');
			var au = document.createElement('audio');
			var hf = document.createElement('a');
			
			au.controls = true;
			au.src = url;
			hf.href = url;
			hf.download = new Date().toISOString() + '.wav';
			hf.innerHTML = hf.download;
			li.appendChild(au);
			li.appendChild(hf);
			englishspeech.appendChild(li);
*/
			});
		});
	}

    function speechExamplification( button ){
      var englishtext = $('#englishtext').html();
      var voice = $('#voice').val();
/*
      $.ajax({
        type: 'POST',
        url: './t2s',
        data: { text: englishtext, voice: voice }
      }).done( function( speech ){
        //console.log( speech );
        var blob = new Blob( [speech], { type: 'audio/wav' } );
        var url = URL.createObjectURL( blob );
        $('#englishspeech').attr( 'src', url );

        $('#englishspeech').attr( 'src', 'data:audio/wav;base64,'+speech );
      });
*/
        $('#englishspeech').attr( 'src', './t2s?text=' + englishtext + '&voice=' + voice );
    }

	window.onload = function init(){
		try{
			window.AudioContext = window.AudioContext || window.webkitAudioContext;
			navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
			window.URL = window.URL || window.webkitURL;
			
			audio_context = new AudioContext;
			__log('Audio context set up.');
			__log('navigator.getUserMedia ' + (navigator.getUserMedia ? 'available.' : 'not present!'));
		}
		catch (e){
			alert('No web audio support in this browser!');
		}
		
		navigator.getUserMedia({audio: true}, startUserMedia, function(e) {
			__log('No live audio input: ' + e);
		});
	};


	</script>

	<script src="./recorder.js"></script>
</body>
</html>

